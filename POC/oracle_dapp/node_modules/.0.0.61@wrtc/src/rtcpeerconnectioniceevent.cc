#include "rtcpeerconnectioniceevent.h"

#include "webrtc/base/refcount.h"

using node_webrtc::RTCIceCandidate;
using node_webrtc::RTCPeerConnectionIceEvent;
using v8::External;
using v8::Function;
using v8::FunctionTemplate;
using v8::Handle;
using v8::Integer;
using v8::Local;
using v8::Object;
using v8::String;
using v8::Value;

Nan::Persistent<Function> RTCPeerConnectionIceEvent::constructor;

NAN_METHOD(RTCPeerConnectionIceEvent::New) {
  RTCIceCandidate* candidate = nullptr;
  if (!Nan::To<Object>(info[0]).IsEmpty()) {
    Local<Object> _candidate = Nan::To<Object>(info[0]).ToLocalChecked();
    candidate = Nan::ObjectWrap::Unwrap<RTCIceCandidate>(_candidate);
  }

  RTCPeerConnectionIceEvent* obj = new rtc::RefCountedObject<RTCPeerConnectionIceEvent>(candidate);
  obj->Wrap(info.This());

  info.GetReturnValue().Set(info.This());
}

NAN_GETTER(RTCPeerConnectionIceEvent::GetCandidate) {
  RTCPeerConnectionIceEvent* self = Nan::ObjectWrap::Unwrap<RTCPeerConnectionIceEvent>(info.Holder());
  Local<Value> candidate = Nan::Null();
  if (self->_candidate != nullptr) {
    candidate = self->_candidate->handle();
  }
  info.GetReturnValue().Set(candidate);
}

NAN_GETTER(RTCPeerConnectionIceEvent::GetUrl) {
  info.GetReturnValue().Set(Nan::Null());
}

RTCPeerConnectionIceEvent* Create(RTCIceCandidate* candidate) {
  Nan::HandleScope scope;
  Local<Value> argv[1] = { Nan::Null() };
  if (candidate != nullptr) {
    argv[0] = candidate->handle();
  }
  Local<Function> cons = Nan::New(RTCPeerConnectionIceEvent::constructor);
  Nan::MaybeLocal<Object> event = Nan::NewInstance(cons, 1, argv);
  if (event.IsEmpty()) {
    return nullptr;
  }
  return Nan::ObjectWrap::Unwrap<RTCPeerConnectionIceEvent>(event.ToLocalChecked());
}

void RTCPeerConnectionIceEvent::Handle(Local<Object> target) {
  Nan::HandleScope scope;
  Local<Function> callback = Local<Function>::Cast(
    target->Get(Nan::New("on" + _type).ToLocalChecked()));

  Local<Value> argv[1];
  argv[0] = this->handle();

  Nan::MakeCallback(target, callback, 1, argv);
}

void RTCPeerConnectionIceEvent::Init(v8::Handle<Object> exports) {
  Local<FunctionTemplate> tpl = Nan::New<FunctionTemplate>(New);
  tpl->SetClassName(Nan::New("RTCPeerConnectionIceEvent").ToLocalChecked());
  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  Nan::SetAccessor(tpl->InstanceTemplate(), Nan::New("candidate").ToLocalChecked(), GetCandidate, nullptr);
  Nan::SetAccessor(tpl->InstanceTemplate(), Nan::New("url").ToLocalChecked(), GetUrl, nullptr);
  constructor.Reset(tpl->GetFunction());
  exports->Set(Nan::New("RTCPeerConnectionIceEvent").ToLocalChecked(), tpl->GetFunction());
}
